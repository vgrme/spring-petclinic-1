apiVersion: 2.1.0
metadata:
  generateName: spring-petclinic-
projects:
  - name: spring-petclinic
    source:
      type: git
      location: 'https://github.com/redhat-developer-demos/spring-petclinic.git'
      branch: main
components:
  - id: redhat/java11/latest
    type: chePlugin
  - id: redhat/dependency-analytics/latest
    type: chePlugin
  - mountSources: true
    endpoints:
      - name: 8080-tcp
        port: 8080
    memoryLimit: 768Mi
    type: dockerimage
    volumes:
      - name: m2
        containerPath: /home/jboss/.m2
    alias: maven
    image: 'registry.redhat.io/codeready-workspaces/plugin-java11-rhel8@sha256:641e223f5efbc32bab3461aa000e3a50a5dcca063331322158d1c959129ffd99'
    env:
      - value: '-XX:MaxRAMPercentage=50.0 -XX:+UseParallelGC -XX:MinHeapFreeRatio=10 -XX:MaxHeapFreeRatio=20 -XX:GCTimeRatio=4 -XX:AdaptiveSizePolicyWeight=90 -Dsun.zip.disableMemoryMapping=true -Xms20m -Djava.security.egd=file:/dev/./urandom -Duser.home=/home/jboss'
        name: JAVA_OPTS
      - value: $(JAVA_OPTS)
        name: MAVEN_OPTS
      - value: 'mysql'
        name: SPRING_PROFILES_ACTIVE
      - value: 'jdbc:mysql://mysql-workspace:3306/petclinic'
        name: MYSQL_URL
  - type: dockerimage
    alias: mysql
    image: >-
      registry.redhat.io/rhel8/mysql-80@sha256:55c08482a20b653dab4d78fad77b5a459e04258135e19fb14efbd1072c786fd3
    memoryLimit: 512Mi
    env:
      - name: DATABASE_SERVICE_NAME
        value: mysql-workspace
      - name: MYSQL_USER
        value: petclinic
      - name: MYSQL_PASSWORD
        value: petclinic
      - name: MYSQL_ROOT_PASSWORD
        value: petclinic
      - name: MYSQL_DATABASE
        value: petclinic
    volumes:
      - name: mysql-storage
        containerPath: /var/lib/mysql
    endpoints:
      - name: mysql-workspace
        port: 3306
        attributes:
          discoverable: 'true'
          public: 'false'
commands:
  - name: 1. Build
    actions:
      - workdir: '${CHE_PROJECTS_ROOT}/spring-petclinic'
        type: exec
        command: 'MAVEN_OPTS="-Xmx200m" && mvn -Duser.home=${HOME} -DskipTests clean install'
        component: maven
  - name: 2. Run
    actions:
      - workdir: '${CHE_PROJECTS_ROOT}/spring-petclinic'
        type: exec
        command: 'MAVEN_OPTS="-Xmx200m" && mvn -Duser.home=${HOME} spring-boot:run'
        component: maven
  - name: 3. Run in debug mode
    actions:
      - workdir: '${CHE_PROJECTS_ROOT}/spring-petclinic'
        type: exec
        command: |-
          mvn  -Duser.home=${HOME} spring-boot:run -Dspring-boot.run.jvmArguments="-Xdebug
           -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005"
        component: maven
  - name: 4. Run tests
    actions:
      - workdir: '${CHE_PROJECTS_ROOT}/spring-petclinic'
        type: exec
        command: 'MAVEN_OPTS="-Xmx200m" && mvn -Duser.home=${HOME} verify'
        component: maven
  - name: 5. Log into deployment cluster
    actions:
      - workdir: '${CHE_PROJECTS_ROOT}/spring-petclinic'
        type: exec
        command: |
          echo
          echo "Before you can deploy this application to an openshift cluster,"
          echo "you must run 'oc login ...' in the maven terminal."
          echo
        component: maven
  - name: 6. Deploy to OpenShift
    actions:
      - workdir: '${CHE_PROJECTS_ROOT}/spring-petclinic'
        type: exec
        command: 'mvn fabric8:deploy -Popenshift -DskipTests'
        component: maven
  - name: Debug remote java application
    actions:
      - referenceContent: |
          {
           "version": "0.2.0",
           "configurations": [
             {
               "type": "java",
               "name": "Debug (Attach) - Remote",
               "request": "attach",
               "hostName": "localhost",
               "port": 5005
             }]
           }
        type: vscode-launch
